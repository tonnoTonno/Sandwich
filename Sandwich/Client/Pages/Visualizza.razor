@page "/view"
@using System.Collections.Generic
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager;

<style>
    .styled-table {
        width: 50%;
        border-collapse: collapse;
        margin: 50px auto;
    }

        .styled-table th,
        .styled-table td {
            padding: 10px;
            width:50px;
        }

        .styled-table thead {
            background-color: #240046;
            color: #fff;
        }

        .styled-table tbody tr:nth-child(even) {
            background-color: #E6E6E6;
        }

        .styled-table tbody tr:nth-child(odd) {
            background-color: #EEEEEE;
        }

        .styled-table .clickable {
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .styled-table .clickable:hover {
                background-color: #EBEBE3;
            }

        .styled-table .expanded-row {
            display: none;
            margin-bottom: 10px;
            padding:20px;
            color: #666;
            transition: all .8s ease-in-out;
        }


    
</style>

<Bolle left_="50%" ></Bolle>
<div class="heading" style="margin-top:30px;display: flex;justify-content: center;z-index:2;margin-left:auto">
    <button id="back" @onclick="()=>VaiA(1)" style="font-size:80px">ᐊ</button>
    <h1 style="color:white;font-family:Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;margin:0 0 auto;font-size:80px">Visualizza</h1>
</div>
<LittleMenu StateChanged="ChangeSelectedValue"></LittleMenu>
<table class="styled-table">
    <thead>
        <tr>
            @if(SelectedValue!="3")
            {
                <th>Id</th>
                <th>Nome</th>
                @if (SelectedValue == "2")
                {
                    <th>creatore</th>
                }
                <th>Stato</th>
                <th></th>
                <th></th>
            }else
            {
                
            }
            
        </tr>
    </thead>
    <tbody>
        @if(SelectedValue=="1")
        {
            @foreach (var test in ListaTest)
            {
                <tr class="clickable">
                    <td>@test.IdTest</td>
                    <td>@test.Nome</td>
                    <td>@TraduciAperto(test.Aperto)</td>
                    <td></td>
                    @if (TraduciAperto(test.Aperto) == "Chiuso")
                    {
                        <td><GenericButton Contenuto="Apri" OnClic="e=>ApriChiudiTest(test)" Color1="#3d3a4e" Color2="linear-gradient( 82.3deg, rgba(150, 93, 233, 1) 10.8%, rgba(99, 88, 238, 1) 94.3% )"></GenericButton></td>
                    }
                    else
                    {
                        <td><GenericButton2 Contenuto="Chiudi" OnClic="e=>ApriChiudiTest(test)" Color1="linear-gradient( 82.3deg, rgba(150, 93, 233, 1) 10.8%, rgba(99, 88, 238, 1) 94.3% )" Color2="#3d3a4e"></GenericButton2></td>
                    }
                </tr>
            }
        }
        else if (SelectedValue == "2")
        {
            @foreach (var test in ListaEsplora)
            {
                <tr class="clickable">
                    <td>@test.IdTest</td>
                    <td>@test.Nome</td>
                    <td>@test.creatore</td>
                    <td>@TraduciAperto(test.Aperto)</td>
                    <td></td>
                    @if(test.Aperto==true)
                    {
                        <td><GenericButton Contenuto="Testa" OnClic="e=>Join(test.IdTest.ToString())" Color1="#3d3a4e" Color2="linear-gradient( 82.3deg, rgba(150, 93, 233, 1) 10.8%, rgba(99, 88, 238, 1) 94.3% )"></GenericButton></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    
                </tr>
            }
        }



    </tbody>
</table>

@code {
    public void VaiA(int s)
    {
        NavManager.NavigateTo(((s == 1) ? "/home" : "/"));
    }
    public string SelectedValue="1";

    public void Join(string id)
    {
        NavManager.NavigateTo($"/join?IdTest={id}", forceLoad: true);
    }

    public async Task ChangeSelectedValue(string s)
    {
        SelectedValue = s;
        string MailCreatore = await sessionStorage.GetItemAsync<string>("MailLogged");
        ListaTest = await Http.GetFromJsonAsync<List<Test>>($"/api/Test/GetByCreator?c={MailCreatore}");
        ListaEsplora = (await Http.GetFromJsonAsync<List<Test>>("/api/Test"));
        //ListaTentativi = await Http.GetFromJsonAsync<List<Tentativo>>("/api/Tentativi");
    }

    private string TraduciAperto(bool? b)
    {
        return (bool)b ? "Aperto" : "Chiuso";
    }

    public async Task ApriChiudiTest(Test t)
    {
        Test a = t;
        a.Aperto = !a.Aperto;
        HttpResponseMessage response = await Http.PutAsJsonAsync($"/api/Test/{t.IdTest}", a);
    }

    public List<Test> ListaTest { get; set; } = new List<Test>();
    public List<Test> ListaEsplora { get; set; } = new List<Test>();
    public List<Tentativo> ListaTentativi { get; set; } = new List<Tentativo>();

    protected override async Task OnInitializedAsync()
    {
        string MailCreatore = await sessionStorage.GetItemAsync<string>("MailLogged");
        ListaTest = await Http.GetFromJsonAsync<List<Test>>($"/api/Test/GetByCreator?c={MailCreatore}");
        ListaEsplora = (await Http.GetFromJsonAsync<List<Test>>("/api/Test"));
        //ListaTentativi = await Http.GetFromJsonAsync<List<Tentativo>>("/api/Tentativi");

    }
}


