@page "/view"
@using System.Collections.Generic
@inject HttpClient Http

<style>
    .styled-table {
        width: 50%;
        border-collapse: collapse;
        margin: 50px auto;
    }

        .styled-table th,
        .styled-table td {
            padding: 10px;
        }

        .styled-table thead {
            background-color: #240046;
            color: #fff;
        }

        .styled-table tbody tr:nth-child(even) {
            background-color: #E6E6E6;
        }

        .styled-table tbody tr:nth-child(odd) {
            background-color: #EEEEEE;
        }

        .styled-table .clickable {
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .styled-table .clickable:hover {
                background-color: #EBEBE3;
            }

        .styled-table .expanded-row {
            display: none;
            margin-bottom: 10px;
            padding:20px;
            color: #666;
            transition: all .8s ease-in-out;
        }


    
</style>

<Bolle left_="50%"></Bolle>

<table class="styled-table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Nome</th>
            <th>Creatore</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var test in ListaTest)
        {
            <tr class="clickable" @onclick="@(() => ToggleExpansion(test))">
                <td>@test.IdTest</td>
                <td>@test.Nome</td>
                <td>@test.creatore</td>
            </tr>
            @if (test.IsExpanded)
            {
                <tr class="clickable">
                    <td colspan="1"></td>
                    <td colspan="1">
                        <DurataInput ></DurataInput>
                    </td>
                    <td colspan="1">
                        <GenericButton Contenuto="Apri"></GenericButton>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {


    private void ToggleExpansion(Test test)
    {

        foreach (Test t in ListaTest)
        {
            if(t!=test)
                t.IsExpanded = false;
        }
        test.IsExpanded = !test.IsExpanded;
    }

    List<Test> ListaTest { get; set; } = new List<Test>();

    protected override async Task OnInitializedAsync()
    {
        string apiurl = "/api/Test";
        ListaTest = await Http.GetFromJsonAsync<List<Test>>(apiurl);
        ListaTest.ForEach(x => x.IsExpanded = false);
    }
}


