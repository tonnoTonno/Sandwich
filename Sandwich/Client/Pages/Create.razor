@page "/create"
@inject HttpClient Http
@inject NavigationManager NavManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
<style>

    body {
        font-family: "Montserrat", sans-serif;
        font-weight: 300;
        color: #fff;
        width: 100%;
        height: 100%;
    }

    .container {
        max-width: 50rem;
        width: 90vw;
        margin: 2rem auto;
        background: transparent;
    }

    .heading__text {
        margin-bottom: 1.5rem;
        text-align: center;
        font-size: 3rem;
        font-weight: 300;
    }

    .submit {
        border: none;
        border-radius: 100vh;
        padding: 0.8rem 1.5rem;
        background: #117eeb;
        color: #fff;
        font-family: inherit;
        text-transform: uppercase;
        font-size: 1rem;
        font-weight: 300;
        display: block;
        margin: 1rem auto 4rem auto;
        cursor: pointer;
        transition: transform 200ms ease, box-shadow 200ms ease;
    }

        .submit:focus {
            outline: none;
        }

        .submit:hover {
            transform: translateY(-2px) scale(1.015);
            box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.35);
        }

        .submit:active {
            transform: translateY(0) scale(1);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

</style>
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet" />
<Bolle left_="15%"></Bolle>
<body style="overflow-y:scroll;position:fixed;height:100%;margin-top:-150px">
    <div class="heading" style="margin-top:30px;display: flex;justify-content: center;">
        <input class="heading__text" placeholder="Inserire Nome" style="border:hidden;background:transparent;" @bind-value="@QuizName" />
    </div>
    <div class="container" style="display: flex;justify-content: center;">
        <div style="justify-content: center;">
            @foreach (Domanda d in Domande)
            {
                <FormQuestion Opzioni=@d.Opzioni Domanda=@d RemoveDomanda="RemoveDomanda" RemoveVisibility="@TakeVisibility()" over="@TakeOver(d,Domande)"></FormQuestion>
            }
            <div style="display:flex;justify-content: center;" @onclick="AddQuestion">
                <Plus_Minus btp="add-icon" text="Aggiungi Domanda"></Plus_Minus>
            </div>
            <div>
                <button class="submit" type="submit" @onclick="AddQuiz">Conferma</button>
            </div>
        </div>
    </div>
</body>


@code {
    List<Domanda> Domande = new List<Domanda> { new Domanda() };
    public string? QuizName;
    public int TestId=0;
    public List<Test>? ListaTest = new();

    public string TakeOver(Domanda o, List<Domanda> l)
    {
        return "Domanda " + ((l.IndexOf(o) + 1).ToString());
    }

    public string TakeVisibility()
    {
        return (Domande.Count == 1) ? "hidden" : "visible";
    }

    public void AddQuestion()
    {
        Domande.Add(new Domanda());
    }
    public async Task AddQuiz()
    {
        string MailCreatore = await sessionStorage.GetItemAsync<string>("MailLogged");
        TakeIdQuiz();
        Test Quizzettone = new Test() { Aperto = false, IdTest = TestId, Nome = QuizName, creatore= MailCreatore,Durata=0};
        HttpResponseMessage response = await Http.PostAsJsonAsync("/api/Test", Quizzettone);

        foreach(Domanda a in Domande)
        {
            a.IdTest = TestId;
            a.Progressivo = Domande.IndexOf(a) + 1;
            response = await Http.PostAsJsonAsync("/api/Question", a);
            for(int i=0;i<a.Opzioni.Count;i++)
            {
                a.Opzioni[i].ProgressivoOpzione = i + 1;
                a.Opzioni[i].IdTest = TestId;
                a.Opzioni[i].ProgDomanda = a.Progressivo;
                response = await Http.PostAsJsonAsync("/api/Answer", a.Opzioni[i]);
            }
        }
        NavManager.NavigateTo("/home");

    }

    protected override async Task OnInitializedAsync()
    {
        ListaTest = await Http.GetFromJsonAsync<List<Test>>("/api/Test");
    }

    public void TakeIdQuiz()
    {
        if (ListaTest?.Count != 0)
        {
            ListaTest?.OrderBy(x => x.IdTest).ToList();
            foreach (Test t in ListaTest)
            {
                if (t.IdTest != ListaTest.IndexOf(t)+1)
                {
                    TestId = ListaTest.IndexOf(t)+1;
                }
            }
            if (TestId == 0)
            {
                TestId = ListaTest.Count()+1;
            }
        }else
        { TestId = 1; }

    }

    public void RemoveDomanda(Domanda a)
    {
        Domande.Remove(a);
    }
}
