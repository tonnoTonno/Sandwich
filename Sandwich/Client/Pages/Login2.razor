@page "/"
@inject HttpClient Http
@inject NavigationManager NavManager;

<style>
		.main {
			
		flex-direction: column;
		background-color: #240046;
		overflow: hidden;
		border-radius: 12px;
		box-shadow: 0 0 20px -2px #7B5E94;
		min-height: 515px;
		max-height: 515px;
		min-width: 356px;
		max-width:356px;
		justify-content: center;
		align-self:center;
		border-radius: 10px;
		position: absolute;
		left: 50%;
		top: 180px;
		transform: translateX(-50%);
		}

		.error{
		color:darkred;
		flex-direction: column;
		justify-content: center;
		align-self: center;
		left: 50%;
		top: @top;
		position: absolute;
		transform: translateX(-50%);
		}

		.form {
		display: flex;
		flex-direction: column;
		gap: 14px;
		padding: 24px;
		}

		/*checkbox to switch from sign up to login*/
		#chk {
		display: none;
		}

		/*Login*/
		.login {
		position: relative;
		width: 100%;
		height: 100%;
		}

		.login label {
		margin: 20% 0 5%;
		}

		label {
		color: #fff;
		font-size: 2rem;
		justify-content: center;
		display: flex;
		font-weight: bold;
		cursor: pointer;
		transition: .5s ease-in-out;
		}

		.input {
		width: 100%;
		height: 40px;
		background: #e0dede;
		padding: 10px;
		border: none;
		outline: none;
		border-radius: 4px;
		}

		/*Register*/
		.register {
		background: #eee;
		border-radius: 60%/10%;
		transform: translateY(5%);
		transition: .8s ease-in-out;
		}

		.register label {
		color: #573b8a;
		transform: scale(.6);
		}

		#chk:checked ~ .register {
		transform: translateY(-60%);
		}

		#chk:checked ~ .register label {
		transform: scale(1);
		margin: 10% 0 5%;
		}

		#chk:checked ~ .login label {
		transform: scale(.6);
		margin: -5% 0 15%;
		}   
		/*Button*/
		.form button {
		width: 85%;
		height: 40px;
		margin: 50px auto 10%;
		color: #fff;
		background: #573b8a;
		font-size: 1rem;
		font-weight: bold;
		border: none;
		border-radius: 4px;
		cursor: pointer;
		transition: .2s ease-in;
		}

		.form button:hover {
		background-color: #6d44b8;
		}
		#error{
		box-shadow: 0 0 20px -2px darkred;
		}
</style>
<Bolle left_="50%"></Bolle>
<body>
		<div class="main" >
			<input type="checkbox" id="chk" aria-hidden="true">
			<div class="login">
				<form class="form">
					<label for="chk" aria-hidden="true" onclick="@Annulla">Log in</label>
					<input id="@MailErrore" class="input" type="email" name="email" placeholder="Email" required="" @onchange="@((ChangeEventArgs e) =>{ _Mail = e.Value.ToString(); MailErrore=null;})" @oninput="@((e) => { _Mail=(string)e.Value;})">
					<input id="@PswErrore" class="input" type="password" name="pswd" placeholder="Password" required="" @onchange="@((ChangeEventArgs e) =>{ _Password = e.Value.ToString(); PswErrore=null;})" @oninput="@((e) => { _Password=(string)e.Value;})">
					<button onclick="@Accedi" type="button">Log in</button>
				</form>
			</div>

			<div class="register">
				<form class="form">
					<label for="chk" aria-hidden="true" onclick="@Annulla">Register</label>
					<div class="form-row">
						<input id="@NamErroreReg" class="input" type="text" name="name" placeholder="Name" required="" @onchange="@((ChangeEventArgs e) =>{ NameReg = e.Value.ToString(); NamErroreReg=null;})" @oninput="@((e) => { NameReg=(string)e.Value;})" style="width:49%">
						<input id="@SurErroreReg" class="input" type="text" name="surname" placeholder="Surname" required="" @onchange="@((ChangeEventArgs e) =>{ SurnameReg = e.Value.ToString(); SurErroreReg=null;})" @oninput="@((e) => { SurnameReg=(string)e.Value;})" style="width:49%">
					</div>
					<input id="@UserErroreReg" class="input" type="text" name="username" placeholder="Username" required="" @onchange="@((ChangeEventArgs e) =>{ _UsernameReg = e.Value.ToString(); UserErroreReg=null;})" @oninput="@((e) => { _UsernameReg=(string)e.Value;})">
					<input id="@MailErroreReg" class="input" type="email" name="email" placeholder="Email" required="" @onchange="@((ChangeEventArgs e) =>{ _MailReg = e.Value.ToString(); MailErroreReg=null;})" @oninput="@((e) => { _MailReg=(string)e.Value;})">
					<div class="form-row">
						<input id="@PswErroreReg" class="input" type="password" name="pswd" placeholder="Password" required="" @onchange="@((ChangeEventArgs e) =>{ _PasswordReg = e.Value.ToString(); PswErroreReg=null;})" @oninput="@((e) => { _PasswordReg=(string)e.Value;})" style="width:49%">
						<input id="@PswErroreReg" class="input" type="password" name="confirm" placeholder="Confirm Password" required="" @onchange="@((ChangeEventArgs e) =>{ ConfirmReg = e.Value.ToString(); PswErroreReg=null;})" @oninput="@((e) => { ConfirmReg=(string)e.Value;})" style="width:49%">
					</div>
					<button type="button" onclick="@Registra" style="margin: 35px auto 20%;">Register</button>
				</form>
			</div>
		</div>
		<div class="error">
			<p>@Error</p>
		</div>
</body>
@code {
	public string top { get; set; } ="220px";
	public string Error { get; set; } = "";

	public string _Mail { get; set; } = "";
	public string _Password { get; set; } = "";

	public string MailErrore { get; set; }
	public string PswErrore { get; set; }


	public async Task Accedi()
	{
		top = "220px";
		Error = null;
		if (_Mail != "" && _Password != "")
		{
			List<Utente>? l = await Http.GetFromJsonAsync<List<Utente>>($"/api/Utente/GetByMail?Mail={_Mail}");
			if (l.Count > 0)
			{
				if (l[0].Password == _Password)
				{
					NavManager.NavigateTo("/home");
				}
				else
				{
					PswErrore = "error";
					Error = "Password errata";
				}
			}
			else
			{
				MailErrore = "error";
				Error = "Mail non trovata";
			}
		}
		else
		{
			if (_Mail == "")
				MailErrore = "error";
			if (_Password == "")
				PswErrore = "error";
			Error = "Riempire tutti i campi";
		}
	}

	//-------------------------------------------------------------------

	public string NameReg { get; set; } = "";
	public string SurnameReg { get; set; } = "";
	public string _UsernameReg { get; set; } = "";
	public string _MailReg { get; set; } = "";
	public string _PasswordReg { get; set; } = "";
	public string ConfirmReg { get; set; } = "";

	public string PswErroreReg { get; set; }
	public string NamErroreReg { get; set; }
	public string SurErroreReg { get; set; }
	public string MailErroreReg { get; set; }
	public string UserErroreReg { get; set; }


	public async Task Registra()
	{
		top = "275px";
		Error = null;
		if (_PasswordReg == ConfirmReg && NameReg != "" && SurnameReg != "" && _UsernameReg != "" && _MailReg != "" && _PasswordReg != "")
		{
			List<Utente>? l = await Http.GetFromJsonAsync<List<Utente>>($"/api/Utente/GetByMail?Mail={_MailReg}");
			if (l.Count > 0)
			{
				Error = "Email già in uso";
				MailErroreReg = "error";
			}
			else
			{
				Utente utente = new Utente { Mail = _MailReg, Nome = NameReg, Cognome = SurnameReg, Username = _UsernameReg, Password = _PasswordReg };
				HttpResponseMessage response = await Http.PostAsJsonAsync("/api/Utente", utente);
				NavManager.NavigateTo("/home");
			}

		}
		else
		{
			if (NameReg != "" && SurnameReg != "" && _UsernameReg != "" && _MailReg != "")
			{
				PswErroreReg = "error";
				Error = "Password non valida";
			}
			else
			{
				if (NameReg == "")
					NamErroreReg = "error";
				if (SurnameReg == "")
					SurErroreReg = "error";
				if (_UsernameReg == "")
					UserErroreReg = "error";
				if (_MailReg == "")
					MailErroreReg = "error";
				if(_PasswordReg=="")
					PswErroreReg="error";
				Error = "Riempire tutti i campi";
			}
		}

	}

	public async Task Annulla()
	{
		Error = "";

		MailErrore = "";
		PswErrore = "";


		PswErroreReg = "";
		NamErroreReg= "";
		SurErroreReg = "";
		MailErroreReg = "";
		UserErroreReg = "";
	}
}
