@page "/form"
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    ::selection {
        background: #fff;
        color: #240046;
    }

    body {
        background: #fff;
        font-family: "Montserrat", sans-serif;
        font-weight: 300;
        color: #fff;
        background: transparent;
    }

    .container {
        max-width: 50rem;
        width: 90vw;
        margin: 2rem auto;
    }

    .quiz__heading {
        display: none;
    }

    .result {
        font-size: 2rem;
        color: #117eeb;
    }

    .heading__text {
        margin-bottom: 1.5rem;
        text-align: center;
        font-size: 3rem;
        font-weight: 300;
    }

    .quiz__heading-text {
        margin-bottom: 2rem;
        text-align: center;
        font-weight: 300;
    }

    .quiz-form__question {
        margin-bottom: 0.8rem;
        font-size: 1.2rem;
        color:white;
    }

    .quiz-form__quiz:not(:last-child) {
        margin-bottom: 1.5rem;
        border-radius: 0.8rem;
        border: 2px solid #fff;
        padding: 40px;
    }

    .quiz-form__ans {
        border-radius: 0.8rem;
        border: 2px solid #fff;
        padding: 0.8rem;
        color: #240046;
        position: relative;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        flex-wrap: nowrap;
        cursor: pointer;
        background:#fff;
    }

        .quiz-form__ans:not(:last-child) {
            margin-bottom: 0.5rem;
        }


    .text {
        backface-visibility: hidden;
        transition: transform 200ms ease-in;
    }



    .submit {
        border: none;
        border-radius: 100vh;
        padding: 0.8rem 1.5rem;
        background: #117eeb;
        color: #fff;
        font-family: inherit;
        text-transform: uppercase;
        font-size: 1rem;
        font-weight: 300;
        display: block;
        margin: 1rem auto 4rem auto;
        cursor: pointer;
        transition: transform 200ms ease, box-shadow 200ms ease;
    }

        .submit:focus {
            outline: none;
        }

        .submit:hover {
            transform: translateY(-2px) scale(1.015);
            box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.35);
        }

        .submit:active {
            transform: translateY(0) scale(1);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

    input[type='radio'] {
        margin: 5px;
    }
</style>

<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet" />
<div class="container">
    <!-- Quiz section -->
    <div class="quiz" style="border:2px solid; border-radius:50px; padding:25px;background:#240046;  width:100%">
        <form class="quiz-form">
            <div class="quiz-form__quiz" >
                <p class="quiz-form__question">
                    <div style="visibility:@RemoveVisibility;margin-bottom:15px">
                        <Remove e="()=>RemoveQuest(Domanda)"></Remove>
                    </div>
                    <InputQuestion_ Domanda="@Domanda" Sopra="@over"></InputQuestion_>
                </p>

                @foreach (Opzione o in Domanda.Opzioni)
                {
                    <label class="quiz-form__ans" style="width:100%">
                        <span></span>
                        <InputAnswer Opzione="@o" Sopra="@TakeOver(o,Domanda.Opzioni)"></InputAnswer>
                        <b></b>
                        <Plus_Minus btp="subtract-icon" text="Rimuovi Risposta" e="()=>Remove(o)" vis="TakeVisibility()"></Plus_Minus>
                    </label>
                }

                <div style="display: flex;justify-content: center;" >
                    <Plus_Minus btp="add-icon" text="Aggiungi Risposta" e="()=>AddCount()"></Plus_Minus>
                </div>

            </div>
        </form>
    </div>
</div>

@code {
    [Parameter]
    public string? over{ get; set; }


    [Parameter]
    public Domanda Domanda { get; set; } = new();
    [Parameter]
    public string RemoveVisibility { get; set; }="visible";

    [Parameter]
    public EventCallback<Domanda> RemoveDomanda { get; set; }

    public void onCambiamentoSelezione()
    {

    }

    public string TakeOver(Opzione o,List<Opzione> l)
    {
        return "Risposta " + ((l.IndexOf(o) + 1).ToString());
    }

    public string TakeVisibility()
    {
        return (Domanda.Opzioni.Count == 1) ? "hidden" : "visible";
    }

    public void AddCount()
    {
        var opt = new Opzione() { OpzioneCorretta = false,Ischecked="" };
    Domanda.Opzioni.Add(opt);

    }

    public async void Remove(Opzione o)
    {
        Domanda.Opzioni.Remove(o);
    }
    public async void RemoveQuest(Domanda a)
    {
        await RemoveDomanda.InvokeAsync(a);
    }
    protected override async Task OnInitializedAsync()
    {
        Domanda.Opzioni = new();
    }
}